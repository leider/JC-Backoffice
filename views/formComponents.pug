mixin text(name, label, value, tooltip, placeholder, readonly)
  .form-group
    if (readonly)
      +hidden(name, value)
    +controlLabel(name, label, tooltip)
    input.form-control.trim-text(id=name, type='text', name=name, value=value, placeholder=placeholder, disabled=readonly)

mixin number(name, label, value, tooltip, min, max)
  .form-group
    if (readonly)
      +hidden(name, value)
    +controlLabel(name, label, tooltip)
    input.form-control.trim-text(id=name, type='number', name=name, value=value, min=min, max=max)

mixin textWithTags(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name, data-tags=true, data-token-separators=[',', ', '])
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin singleselect(name, label, value, placeholder, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(id=name, name=name, data-placeholder=placeholder)
      option(value='') #{' '}
      each tag in tags
        option(value = tag.iso, selected = value && value.indexOf(tag.iso) === 0) #{tag.name}

mixin multiselect(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name)
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin editableMultiselect(name, label, value, tags)
  .form-group
    +controlLabel(name, label)
    select.form-control.enhance(multiple, id=name, name=name, data-tags=true)
      each tag in tags
        option(selected = value.indexOf(tag) > -1) #{tag}

mixin currency(name, label, value, tooltip, placeholder, readonly)
  .form-group
    +controlLabel(name, label, tooltip)
    input.form-control.currency(id=name, type='text', value=value, name=name, placeholder=placeholder, disabled=readonly, text-align='right', data-currency-symbol=' €', data-currency-symbol-placement='s', data-decimal-character=',', data-digit-group-separator='')

mixin currencySpan(id, clazz)
  span.currency.text-success(id=id, class=clazz, data-currency-symbol=' €', data-currency-symbol-placement='s', data-decimal-character=',', data-digit-group-separator='')

mixin currencySpanNormal(value)
  span.currency(id=id, class=clazz, data-currency-symbol=' €', data-currency-symbol-placement='s', data-decimal-character=',', data-digit-group-separator='') #{value}

mixin textareaPure(name, label, value, placeholder)
  +textareaInternal('form-control', '4', name, label, value, null, placeholder)

mixin textarea(name, label, value, tooltip, placeholder)
  +textareaInternal('md-textarea', '7', name, label, value, tooltip, placeholder)

mixin hightextarea(name, label, value, tooltip, placeholder)
  +textareaInternal('md-textarea', '15', name, label, value, tooltip, placeholder)

mixin checkboxWithDescription(name, label, checked, description, optionalValue)
  .checkbox
    label
      input(type='checkbox', name=name, value=optionalValue, checked=(checked ? 'true' : undefined))
      -if (description)
        span.popover-highlight(rel='tooltip-in-body', data-content=description) #{label}
      -else
        | #{label}

mixin checkbox(name, label, checked, optionalValue)
  +checkboxWithDescription(name, label, checked, undefined, optionalValue)

mixin submitButtons()
  .btn-group.pull-right
    a.btn.btn-default(href='javascript:history.back()', type='cancel') Zurück
    button.btn.btn-primary(type='submit') Speichern

mixin submitButtonsFor(veranstaltung, current)
  .btn-group.pull-right
    a.btn.btn-default(href='/', title='Zurück zur Liste'): i.fa.fa-list.fa-fw
    if current !== 'kopf'
      a.btn.btn-default(href=veranstaltung.fullyQualifiedUrl() + '/kopf', title='Allgemeines (ohne Speichern)'): i.fa.fa-keyboard-o.fa-fw
    if current !== 'ausgaben'
      a.btn.btn-default(href=veranstaltung.fullyQualifiedUrl() + '/ausgaben', title='Ausgaben (ohne Speichern)'): i.fa.fa-eur.fa-fw
    if current !== 'hotel'
      a.btn.btn-default(href=veranstaltung.fullyQualifiedUrl() + '/hotel', title='Hotel (ohne Speichern)'): i.fa.fa-bed.fa-fw
    button.btn.btn-primary(type='submit', 'Speichern'): i.fa.fa-floppy-o.fa-fw

mixin hidden(name, value)
  input(type='hidden', name=name, value=value)

mixin dateOld(name, label, value, tooltip)
  .form-group
    +controlLabel(name, label, tooltip)
    input.form-control.datepicker(id=name, type='text', name=name, value=value)

mixin date(name, label, value, tooltip, startDate)
  .form-group
    +controlLabel(name, label, tooltip)
    input.form-control(id=name, type='text', name=name, value=value,
      data-provide='datepicker',
      data-date-format= 'dd.mm.yyyy',
      data-date-autoclose=true,
      data-date-week-start=1,
      data-date-view-ode='days',
      data-date-min-view-mode='days',
      data-date-language='de',
      data-date-orientation='bottom',
      data-date-start-date=startDate
    )

mixin time(name, value)
  .form-group
    label.control-label(for=name) &nbsp;
    input.form-control.timepicker(id=name, type='text', name=name, value=value)

mixin colorPicker(name, value)
  .form-group
    +controlLabel(name, 'Farbe')
    .input-group.c-picker
      span.input-group-addon: i
      input.form-control(id=name, type='text', name=name, value=value)

mixin twitter(name, label, value)
  .form-group
    +controlLabel(name, label)
    .input-group
      span.input-group-addon @
      input.form-control(id=name, type='text', name=name, value=value)

mixin csrf
  +hidden('_csrf', csrf_token)

mixin controlLabel(name, label, tooltip)
  label.control-label(for=name)
    -if (tooltip)
      span.tooltiplabel(data-original-title=tooltip) #{label}:&nbsp;
        i.fa.fa-question-circle
    -else
      | #{label}:

mixin textareaInternal(classname, rowCount, name, label, value, tooltip, placeholder)
  .form-group
    +controlLabel(name, label, tooltip)
    textarea(class=classname, id=name, rows=rowCount, type='text', name=name, placeholder=placeholder) #{value}

mixin reallyDeleteModalPost(header, options, extraclasses)
  +reallyDeleteModalOnly(header, options)
  +reallyDeleteButtonOnly(header, options, extraclasses)

mixin reallyDeleteModalOnly(header, options)
  -var theID = 'reallyDelete' + header.replace('\.', '')
  .modal.fade(id=theID, tabindex='-1')
    .modal-dialog
      .modal-content
        .modal-header
          button.close(type='button', data-dismiss='modal', aria-hidden='true') &times;
          h3 #{header}
        .modal-body
          p Bist Du sicher?
          form(action=options.url, role='form', method='post')
            +csrf
            each val, param in options.params
              +hidden(param, val)
            .btn-group
              button.btn.btn-default(type='cancel', data-dismiss='modal', aria-hidden='true') Nein
              button.btn.btn-primary(type='submit')
                i.fa.fa-trash-o.fa-fw &nbsp;
                | Löschen

mixin reallyDeleteButtonOnly(header, options, extraclasses)
  -var theID = 'reallyDelete' + header.replace('\.', '')
  span.btn.btn-danger(data-toggle='modal', data-target='#' + theID, class=extraclasses)
    i.fa.fa-trash-o.fa-fw
    if (extraclasses)
      | &nbsp; Löschen
